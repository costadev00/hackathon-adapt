# Coding Standards & Best Practices

## Code Style
- Use **Biome** for consistent formatting and linting
- Follow [biome.jsonc](mdc:biome.jsonc) configuration
- Professional comments only - add insightful comments, avoid over-commenting
- Use TypeScript strictly - avoid `any` types
- Prefer explicit types over inference for function parameters and return values

## File Naming Conventions
- **Components**: PascalCase (e.g., `UserProfile.tsx`)
- **Pages**: kebab-case for routes (e.g., `user-settings/page.tsx`)
- **Utilities**: camelCase (e.g., `formatDate.ts`)
- **Types**: PascalCase interfaces/types (e.g., `UserProfile.ts`)
- **Constants**: SCREAMING_SNAKE_CASE (e.g., `API_ENDPOINTS.ts`)

## Component Guidelines
- Use functional components with hooks
- Implement proper TypeScript interfaces for props
- Export components as named exports, not default exports
- Use React.JSX.Element for component return types when needed

## Import Order
1. React and Next.js imports
2. Third-party library imports
3. Internal imports (components, hooks, utils)
4. Type-only imports (using `import type`)
5. Relative imports

## tRPC Patterns
- Define procedures in [src/server/api/](mdc:src/server/api/) directory
- Use input validation with Zod schemas
- Implement proper error handling
- Use React Query hooks generated by tRPC
- Follow the pattern: `api.procedureName.useQuery()` or `api.procedureName.useMutation()`

## Database Patterns
- Use Drizzle ORM with proper schema definitions
- Place schema files in [src/server/db/schema.ts](mdc:src/server/db/schema.ts)
- Use transactions for complex operations
- Implement proper error handling for database operations

## Environment Variables
- Configure environment variables in [src/env.js](mdc:src/env.js)
- Use `@t3-oss/env-nextjs` for validation
- Access validated environment variables via the `env` object

## Error Handling
- Use proper error boundaries for React components
- Implement graceful error handling in tRPC procedures
- Use TRPCError for API errors with appropriate error codes
- Log errors appropriately for debugging
