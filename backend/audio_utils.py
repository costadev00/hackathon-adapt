

#!/usr/bin/env python3
"""
Utilit√°rios para manipula√ß√£o de √°udio no sistema de podcast
"""

import os
import tempfile
import subprocess
from typing import List, Optional
from dataclasses import dataclass
import json

try:
    from pydub import AudioSegment
    from pydub.playback import play
    PYDUB_AVAILABLE = True
except ImportError:
    PYDUB_AVAILABLE = False
    print("‚ö†Ô∏è  PyDub n√£o instalado. Funcionalidade de √°udio limitada.")
    print("   Instale com: pip install pydub")

@dataclass
class AudioConfig:
    """Configura√ß√£o para processamento de √°udio"""
    sample_rate: int = 24000
    channels: int = 1
    bit_depth: int = 16
    format: str = "mp3"
    quality: str = "high"

class AudioProcessor:
    """Processador de √°udio para podcasts"""

    def __init__(self, config: AudioConfig = None):
        self.config = config or AudioConfig()
        self.temp_dir = tempfile.mkdtemp()

    def concatenate_audio_files(self, audio_files: List[str], output_path: str,
                               add_silence: bool = True, silence_duration: int = 500) -> str:
        """
        Concatena m√∫ltiplos arquivos de √°udio

        Args:
            audio_files: Lista de caminhos para arquivos de √°udio
            output_path: Caminho para salvar o arquivo concatenado
            add_silence: Se deve adicionar sil√™ncio entre segmentos
            silence_duration: Dura√ß√£o do sil√™ncio em ms

        Returns:
            Caminho do arquivo concatenado
        """

        if not PYDUB_AVAILABLE:
            return self._concatenate_with_ffmpeg(audio_files, output_path)

        try:
            # Inicia com √°udio vazio
            combined = AudioSegment.empty()

            for i, audio_file in enumerate(audio_files):
                if not os.path.exists(audio_file):
                    print(f"‚ö†Ô∏è  Arquivo n√£o encontrado: {audio_file}")
                    continue

                # Carrega arquivo de √°udio
                audio = AudioSegment.from_file(audio_file)

                # Adiciona ao √°udio combinado
                combined += audio

                # Adiciona sil√™ncio entre segmentos (exceto no √∫ltimo)
                if add_silence and i < len(audio_files) - 1:
                    silence = AudioSegment.silent(duration=silence_duration)
                    combined += silence

            # Salva arquivo final
            combined.export(output_path, format=self.config.format)

            print(f"‚úÖ √Åudio concatenado salvo em: {output_path}")
            print(f"‚è±Ô∏è  Dura√ß√£o total: {len(combined) / 1000:.1f} segundos")

            return output_path

        except Exception as e:
            print(f"‚ùå Erro na concatena√ß√£o: {e}")
            return self._concatenate_with_ffmpeg(audio_files, output_path)

    def _concatenate_with_ffmpeg(self, audio_files: List[str], output_path: str) -> str:
        """Fallback usando ffmpeg para concatena√ß√£o"""

        try:
            # Cria arquivo de lista para ffmpeg
            filelist_path = os.path.join(self.temp_dir, "filelist.txt")

            with open(filelist_path, 'w') as f:
                for audio_file in audio_files:
                    if os.path.exists(audio_file):
                        f.write(f"file '{audio_file}'\n")

            # Comando ffmpeg para concatenar
            cmd = [
                'ffmpeg', '-f', 'concat', '-safe', '0', '-i', filelist_path,
                '-c', 'copy', output_path, '-y'
            ]

            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode == 0:
                print(f"‚úÖ √Åudio concatenado com ffmpeg: {output_path}")
                return output_path
            else:
                print(f"‚ùå Erro no ffmpeg: {result.stderr}")
                return self._create_placeholder_audio(output_path)

        except Exception as e:
            print(f"‚ùå Erro no fallback ffmpeg: {e}")
            return self._create_placeholder_audio(output_path)

    def _create_placeholder_audio(self, output_path: str) -> str:
        """Cria arquivo de √°udio placeholder quando n√£o consegue concatenar"""

        try:
            # Cria √°udio de placeholder usando pydub
            if PYDUB_AVAILABLE:
                # Tom simples de 1 segundo
                tone = AudioSegment.from_file(None, format="raw",
                                            frame_rate=self.config.sample_rate,
                                            channels=self.config.channels,
                                            sample_width=2)

                # Salva placeholder
                tone.export(output_path, format=self.config.format)

            else:
                # Cria arquivo de texto como placeholder
                with open(output_path, 'w') as f:
                    f.write("# Arquivo de √°udio placeholder\n")
                    f.write("# Concatena√ß√£o real n√£o dispon√≠vel\n")

            return output_path

        except Exception as e:
            print(f"‚ùå Erro ao criar placeholder: {e}")
            return ""

    def add_intro_outro(self, main_audio: str, intro_path: Optional[str] = None,
                       outro_path: Optional[str] = None, output_path: str = None) -> str:
        """
        Adiciona introdu√ß√£o e encerramento ao √°udio principal

        Args:
            main_audio: Caminho do √°udio principal
            intro_path: Caminho do √°udio de introdu√ß√£o (opcional)
            outro_path: Caminho do √°udio de encerramento (opcional)
            output_path: Caminho para salvar o resultado

        Returns:
            Caminho do arquivo final
        """

        if not PYDUB_AVAILABLE:
            print("‚ö†Ô∏è  PyDub necess√°rio para adicionar intro/outro")
            return main_audio

        try:
            # Carrega √°udio principal
            main = AudioSegment.from_file(main_audio)

            # Adiciona introdu√ß√£o
            if intro_path and os.path.exists(intro_path):
                intro = AudioSegment.from_file(intro_path)
                main = intro + main
                print("üéµ Introdu√ß√£o adicionada")

            # Adiciona encerramento
            if outro_path and os.path.exists(outro_path):
                outro = AudioSegment.from_file(outro_path)
                main = main + outro
                print("üéµ Encerramento adicionado")

            # Salva resultado
            output_path = output_path or main_audio.replace('.mp3', '_final.mp3')
            main.export(output_path, format=self.config.format)

            return output_path

        except Exception as e:
            print(f"‚ùå Erro ao adicionar intro/outro: {e}")
            return main_audio

    def adjust_volume(self, audio_path: str, volume_change: float) -> str:
        """
        Ajusta o volume do √°udio

        Args:
            audio_path: Caminho do arquivo
            volume_change: Mudan√ßa em dB (positivo aumenta, negativo diminui)

        Returns:
            Caminho do arquivo ajustado
        """

        if not PYDUB_AVAILABLE:
            print("‚ö†Ô∏è  PyDub necess√°rio para ajustar volume")
            return audio_path

        try:
            audio = AudioSegment.from_file(audio_path)
            adjusted = audio + volume_change
            adjusted.export(audio_path, format=self.config.format)

            print(f"üîä Volume ajustado em {volume_change:+.1f}dB")
            return audio_path

        except Exception as e:
            print(f"‚ùå Erro ao ajustar volume: {e}")
            return audio_path

    def get_audio_info(self, audio_path: str) -> dict:
        """
        Obt√©m informa√ß√µes sobre o arquivo de √°udio

        Args:
            audio_path: Caminho do arquivo

        Returns:
            Dicion√°rio com informa√ß√µes do √°udio
        """

        if not PYDUB_AVAILABLE:
            return {
                "duration": 0,
                "channels": 1,
                "sample_rate": self.config.sample_rate,
                "available": False
            }

        try:
            audio = AudioSegment.from_file(audio_path)

            return {
                "duration": len(audio) / 1000,  # em segundos
                "channels": audio.channels,
                "sample_rate": audio.frame_rate,
                "frame_count": audio.frame_count(),
                "available": True
            }

        except Exception as e:
            print(f"‚ùå Erro ao obter info do √°udio: {e}")
            return {"duration": 0, "available": False}

    def create_silence(self, duration_seconds: float, output_path: str) -> str:
        """
        Cria arquivo de √°udio com sil√™ncio

        Args:
            duration_seconds: Dura√ß√£o em segundos
            output_path: Caminho para salvar

        Returns:
            Caminho do arquivo criado
        """

        if not PYDUB_AVAILABLE:
            print("‚ö†Ô∏è  PyDub necess√°rio para criar sil√™ncio")
            return ""

        try:
            silence = AudioSegment.silent(duration=int(duration_seconds * 1000))
            silence.export(output_path, format=self.config.format)

            print(f"üîá Sil√™ncio de {duration_seconds}s criado")
            return output_path

        except Exception as e:
            print(f"‚ùå Erro ao criar sil√™ncio: {e}")
            return ""

    def cleanup_temp_files(self):
        """Remove arquivos tempor√°rios"""

        try:
            import shutil
            shutil.rmtree(self.temp_dir)
            print("üßπ Arquivos tempor√°rios removidos")

        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao limpar arquivos tempor√°rios: {e}")

class PodcastMixer:
    """Classe para mixagem avan√ßada de podcasts"""

    def _init_(self):
        self.processor = AudioProcessor()

    def create_professional_mix(self, segments: List[str], output_path: str,
                               add_background_music: bool = False,
                               normalize_volume: bool = True) -> str:
        """
        Cria mixagem profissional do podcast

        Args:
            segments: Lista de segmentos de √°udio
            output_path: Caminho de sa√≠da
            add_background_music: Se deve adicionar m√∫sica de fundo
            normalize_volume: Se deve normalizar o volume

        Returns:
            Caminho do arquivo final
        """

        print("üéõÔ∏è  Iniciando mixagem profissional...")

        # 1. Concatena segmentos b√°sicos
        temp_path = os.path.join(self.processor.temp_dir, "temp_mix.mp3")
        self.processor.concatenate_audio_files(segments, temp_path)

        # 2. Normaliza volume se solicitado
        if normalize_volume:
            self.processor.adjust_volume(temp_path, 0)  # Normaliza√ß√£o b√°sica

        # 3. Adiciona m√∫sica de fundo se solicitado
        if add_background_music:
            temp_path = self._add_background_music(temp_path)

        # 4. Move para caminho final
        if temp_path != output_path:
            import shutil
            shutil.move(temp_path, output_path)

        print("‚úÖ Mixagem profissional conclu√≠da")
        return output_path

    def _add_background_music(self, audio_path: str) -> str:
        """Adiciona m√∫sica de fundo sutil"""

        # Implementa√ß√£o b√°sica - pode ser expandida
        print("üéµ Adicionando m√∫sica de fundo...")
        return audio_path

    def create_chapters(self, audio_path: str, chapter_times: List[float],
                       chapter_titles: List[str]) -> str:
        """
        Adiciona cap√≠tulos ao podcast

        Args:
            audio_path: Caminho do √°udio
            chapter_times: Lista de tempos dos cap√≠tulos (em segundos)
            chapter_titles: Lista de t√≠tulos dos cap√≠tulos

        Returns:
            Caminho do arquivo com cap√≠tulos
        """

        print("üìö Adicionando cap√≠tulos ao podcast...")

        # Cria arquivo de metadados para cap√≠tulos
        metadata_path = audio_path.replace('.mp3', '_chapters.json')

        chapters = []
        for i, (time, title) in enumerate(zip(chapter_times, chapter_titles)):
            chapters.append({
                "index": i,
                "time": time,
                "title": title
            })

        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump({"chapters": chapters}, f, indent=2, ensure_ascii=False)

        print(f"‚úÖ Cap√≠tulos salvos em: {metadata_path}")
        return audio_path

def test_audio_system():
    """Testa o sistema de √°udio"""

    print("üß™ Testando sistema de √°udio...")

    processor = AudioProcessor()

    # Teste 1: Informa√ß√µes de configura√ß√£o
    print(f"üìä Configura√ß√£o: {processor.config}")

    # Teste 2: PyDub dispon√≠vel?
    if PYDUB_AVAILABLE:
        print("‚úÖ PyDub dispon√≠vel")

        # Teste 3: Criar sil√™ncio
        silence_path = os.path.join(processor.temp_dir, "test_silence.mp3")
        processor.create_silence(2.0, silence_path)

        if os.path.exists(silence_path):
            print("‚úÖ Cria√ß√£o de sil√™ncio funcionando")

            # Teste 4: Informa√ß√µes do √°udio
            info = processor.get_audio_info(silence_path)
            print(f"üìã Info do √°udio: {info}")

    else:
        print("‚ùå PyDub n√£o dispon√≠vel")
        print("   Funcionalidades limitadas")

    # Limpeza
    processor.cleanup_temp_files()

    print("‚úÖ Teste conclu√≠do")
